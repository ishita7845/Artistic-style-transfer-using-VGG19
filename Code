# Import Libraries
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.applications import vgg19
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import time

# Step 1: Load and preprocess image
def load_and_process_img(path_to_img):
    img = load_img(path_to_img, target_size=(224, 224))  # Resize to VGG input size
    img = img_to_array(img)
    img = np.expand_dims(img, axis=0)
    img = vgg19.preprocess_input(img)
    return tf.convert_to_tensor(img)

def deprocess_img(processed_img):
    x = processed_img.numpy().squeeze()
    x[:, :, 0] += 103.939
    x[:, :, 1] += 116.779
    x[:, :, 2] += 123.68
    x = x[:, :, ::-1]
    x = np.clip(x, 0, 255).astype('uint8')
    return x

# Step 2: Provide the correct paths for your content and style images
content_path = '/content/content.jpg'
style_path = '/content/style.jpg'


content_image = load_and_process_img(content_path)
style_image = load_and_process_img(style_path)

# Load the content and style images for display
content_image_display = load_img(content_path, target_size=(224, 224))
style_image_display = load_img(style_path, target_size=(224, 224))

# Plot the images
plt.figure(figsize=(15, 5))

# Content Image
plt.subplot(1, 3, 1)
plt.imshow(content_image_display)
plt.title("Content Image")
plt.axis('off')
# Style Image
plt.subplot(1, 3, 2)
plt.imshow(style_image_display)
plt.title("Style Image")
plt.axis('off')

# Step 3: Define layers for content and style
content_layers = ['block5_conv2']
style_layers = ['block1_conv1', 'block2_conv1',
                'block3_conv1', 'block4_conv1',
                'block5_conv1']
num_content_layers = len(content_layers)
num_style_layers = len(style_layers)

# Step 4: Build model
def vgg_model():
    vgg = vgg19.VGG19(include_top=False, weights='imagenet')
    vgg.trainable = False
    outputs = [vgg.get_layer(name).output for name in (style_layers + content_layers)]
    model = Model([vgg.input], outputs)
    return model

# Step 5: Compute Gram Matrix
def gram_matrix(tensor):
    channels = int(tensor.shape[-1])
    a = tf.reshape(tensor, [-1, channels])
    n = tf.shape(a)[0]
    gram = tf.matmul(a, a, transpose_a=True)
    return gram / tf.cast(n, tf.float32)

# Step 6: Extract style and content
def get_feature_representations(model, content_img, style_img):
    style_outputs = model(style_img)
    content_outputs = model(content_img)

    style_features = [style_layer for style_layer in style_outputs[:num_style_layers]]
    content_features = [content_layer for content_layer in content_outputs[num_style_layers:]]
    return style_features, content_features 

# Step 7: Compute loss
def compute_loss(model, loss_weights, init_image, gram_style_features, content_features):
    style_weight, content_weight = loss_weights
    model_outputs = model(init_image)

    style_output_features = model_outputs[:num_style_layers]
    content_output_features = model_outputs[num_style_layers:]

    style_score = 0
    content_score = 0

    for target_style, comb_style in zip(gram_style_features, style_output_features):
        gram_comb_style = gram_matrix(comb_style)
        style_score += tf.reduce_mean(tf.square(gram_comb_style - target_style))

    for target_content, comb_content in zip(content_features, content_output_features):
        content_score += tf.reduce_mean(tf.square(comb_content - target_content))

    style_score *= style_weight / num_style_layers
    content_score *= content_weight / num_content_layers

    total_loss = style_score + content_score
    return total_loss, style_score, content_score

# Step 8: Style transfer optimization
@tf.function()
def compute_grads(cfg):
    with tf.GradientTape() as tape:
        all_loss = compute_loss(**cfg)
    total_loss = all_loss[0]
    return tape.gradient(total_loss, cfg['init_image']), all_loss

def run_style_transfer(content_path, style_path, iterations=1000,
                       content_weight=1e3, style_weight=1e-2):
    model = vgg_model()
    for layer in model.layers:
        layer.trainable = False

    content_image = load_and_process_img(content_path)
    style_image = load_and_process_img(style_path)

    style_features, content_features = get_feature_representations(model, content_image, style_image)
    gram_style_features = [gram_matrix(style_feature) for style_feature in style_features]

    init_image = tf.Variable(content_image, dtype=tf.float32)
    opt = tf.optimizers.Adam(learning_rate=5.0)

    best_loss, best_img = float('inf'), None

    loss_weights = (style_weight, content_weight)
    cfg = {
        'model': model,
        'loss_weights': loss_weights,
        'init_image': init_image,
        'gram_style_features': gram_style_features,
        'content_features': content_features
    }

    start_time = time.time()

    for i in range(iterations):
        grads, all_loss = compute_grads(cfg)
        loss, style_score, content_score = all_loss
        opt.apply_gradients([(grads, init_image)])
        clipped = tf.clip_by_value(init_image, -103.939, 255.0 - 103.939)
        init_image.assign(clipped)

        if loss < best_loss:
            best_loss = loss
            best_img = init_image.numpy()

        if i % 100 == 0:
            print(f"Iteration {i}: Total loss: {loss.numpy():.4f}, Style loss: {style_score.numpy():.4f}, Content loss: {content_score.numpy():.4f}")

    end_time = time.time()
    print(f"\nTotal time: {end_time - start_time:.1f} seconds")

    return best_img 
# Step 9: Run style transfer and show result
best = run_style_transfer(content_path, style_path, iterations=1000)
final_img = deprocess_img(tf.convert_to_tensor(best))

plt.figure(figsize=(8, 8))
plt.imshow(final_img)
plt.axis('off')
plt.title("Stylized Output")
plt.show()
